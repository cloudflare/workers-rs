name: Pull Request

on:
  - pull_request
  - workflow_dispatch

jobs:
  build-templates:
    name: Build templates
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - uses: cargo-bins/cargo-binstall@main
      - name: Install cargo-generate
        run: cargo binstall cargo-generate
      - name: Install local worker build
        run: cargo install --path worker-build
      - name: Generate and build all templates
        run: |
          mkdir -p generated
          for template in templates/*/; do
              template_name=$(basename "$template")
              if [ "$template_name" = "leptos" ]; then
                echo "Skipping leptos template"
                continue
              fi
              echo "Generating $template_name"
              cargo generate --path $template --name "$template_name" --destination ./generated --force
              cd "generated/$template_name"
              worker-build || echo "Build failed for template $template_name"
              cd ../..
          done
      - name: Build all examples
        run: |
          for example in examples/*/; do
              example_name=$(basename "$template")
              echo "Building $example_name"
              cd "examples/$example_name"
              worker-build || echo "Build failed for example $example_name"
              cd ../..
          done

  rustfmt:
    name: Formatter
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy, rustfmt
          targets: wasm32-unknown-unknown

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Check Formatting
        run: cargo fmt --all -- --check

      - name: Check for idiomatic code
        run: cargo clippy --features d1,queue --all-targets --workspace -- -D warnings

      - name: Check for idiomatic code (http)
        run: cargo clippy --all-features --package worker-sandbox --all-targets -- -D warnings
  test:
    name: Test
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: wasm32-unknown-unknown

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Check for errors
        run: cargo check

      - name: Run builder tests
        run: cargo test --manifest-path worker-build/Cargo.toml

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Install packages
        run: |
          sudo apt update
          sudo apt clean
          sudo apt install -y build-essential libssl-dev netcat-traditional libc++-dev

      - name: Install npm dependencies
        run: npm ci

      - name: Build
        run: npm run build

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Container
        uses: docker/build-push-action@v6
        with:
          context: ./test/container-echo
          push: false
          load: true
          tags: worker-dev/echocontainer:latest

      - name: Run tests
        env:
          TEST_CONTAINER_NAME: worker-dev/echocontainer:latest
        run: npm run test

      - name: Run tests (http)
        run: npm run test-http
