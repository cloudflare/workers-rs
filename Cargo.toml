[workspace]
members = [
    "worker",
    "worker-build",
    "worker-macros",
    "test",
    "worker-sys",
    "worker-kv",
    "examples/*",
    "test/container-echo"
]
exclude = ["examples/coredump", "examples/axum", "templates/*", "wasm-bindgen"]
resolver = "2"

[workspace.dependencies]
async-trait = "0.1.88"
chrono = { version = "0.4.41", default-features = false, features = [
    "wasmbind",
] }
futures-channel = "0.3.31"
futures-util = { version = "0.3.31", default-features = false }
http = "1.3"
js-sys = { version = "0.3.80", path = "./wasm-bindgen/crates/js-sys" }
serde = { version = "1.0.164", features = ["derive"] }
serde_json = "1.0.140"
serde-wasm-bindgen = "0.6.5"
wasm-bindgen = { version = "0.2.103", path = "./wasm-bindgen" }
wasm-bindgen-cli-support = { version = "0.2.103", path = "./wasm-bindgen/crates/cli-support" }
wasm-bindgen-futures = { version = "0.4.53", path = "./wasm-bindgen/crates/futures" }
wasm-bindgen-macro-support = { version = "0.2.103", path = "./wasm-bindgen/crates/macro-support" }
wasm-bindgen-shared = { version = "0.2.103", path = "./wasm-bindgen/crates/shared" }
wasm-bindgen-test = { version = "0.3.51", path = "./wasm-bindgen/crates/test" }
web-sys = { version = "0.3.80", features = [
    "File",
    "ReadableStreamDefaultReader",
    "WorkerGlobalScope",
    "WritableStreamDefaultWriter",
] }
worker = { path = "worker", version = "0.6.6", features = ["queue", "d1", "axum", "timezone"] }
worker-codegen = { path = "worker-codegen", version = "0.2.0" }
worker-kv = { path = "worker-kv", version = "0.9.0" }
worker-macros = { path = "worker-macros", version = "0.6.6", features = ["queue"] }
worker-sys = { path = "worker-sys", version = "0.6.6", features = ["d1", "queue"] }

[profile.release]
# rustc supports two "optimize for size" levels:  opt-level = "s" and "z".
# These names were inherited from clang / LLVM and are not too descriptive
# but "z" is meant to give the idea that it produces smaller binaries than "s".
# https://docs.rust-embedded.org/book/unsorted/speed-vs-size.html#optimize-for-size
opt-level = "z"

# by compiling as a single codegen unit (i.e. not in parallel),
# it's possible to reduce size even further at the expense of
# compilation time
codegen-units = 1

# by enabling link-time optimization, we can reduce size even further
# by telling cargo to optimize at the link stage (in addition to the
# normal optimizations during the compilation stage)
lto = true

# by overriding our dependencies' compilation settings, we can further optimize for size
# https://docs.rust-embedded.org/book/unsorted/speed-vs-size.html#optimizing-dependencies
[profile.release.package."*"]
codegen-units = 1
opt-level = "z"

[patch.crates-io]
js-sys = { version = "0.3.80", path = './wasm-bindgen/crates/js-sys' }
wasm-bindgen = { version = "0.2.103", path = './wasm-bindgen' }
wasm-bindgen-cli-support = { version = "0.2.103", path = "./wasm-bindgen/crates/cli-support" }
wasm-bindgen-futures = { version = "0.4.53", path = './wasm-bindgen/crates/futures' }
wasm-bindgen-macro-support = { version = "0.2.103", path = "./wasm-bindgen/crates/macro-support" }
wasm-bindgen-shared = { version = "0.2.103", path = "./wasm-bindgen/crates/shared" }
wasm-bindgen-test = { version = "0.3.51", path = "./wasm-bindgen/crates/test" }
web-sys = { version = "0.3.80", path = './wasm-bindgen/crates/web-sys' }
